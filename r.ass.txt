## caching the inverse of a matrix
## created function will store the matrix and caches its inverse
## essentially function will create a matrix object to cache its inverse
## makeCacheMatrix is a function that returns a list of function 

makeCacheMatrix <- function(x= matrix()) {
                    i <- NULL 
                    set <- function(y){
                            x <<- y
                            i <<- NULL 
                            }
                    get<-function()x
                    setInverse <- function(inverse) i<<- inverse
                    getInverse <- function() i
                    list(set = set
                         get = get,
                         setInverse = setInverse
                         getInverse = getInverse)


}

}

## This function computes the inverse of the "matrix" which is created from the makecacheMatrix.
## Then we can retrive the inverse from cache
## cacheSolve- returns the inverse of "x"

cacheSolve <- function(x,...) {
         ## Return the matrix that is inverse of "x"
         i <- x$getInverse()
         if(!is.null(i)) {
                message("getting cache data")
                return(i)
         }
         mat <- x$get()
         i <- solve(mat,...)
         x$setInverse(i)
}


